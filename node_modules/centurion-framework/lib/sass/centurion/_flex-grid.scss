// Grid Column Generator
// ----------------------------
$gutter-half: 10px;

// Function: figure out grid percentage
@function grid-percent($grid-columns, $container-width, $i) {
  $percent: 100 / $grid-columns * $i * 1%;
  @return $percent;
}

// [] @TODO: alpha and omega for nested elements (is it needed?)
// [] @TODO: visible and hidden for desktop, tablet, and mobile

// Column Grid
// ----------------------------
@mixin flex-grid() {

  .#{$container-class} {
    @extend %clearfix;
    box-sizing: border-box;
    height: 100%;
    margin: 0 auto;
    max-width: $d-width + $value;
    padding: 0;

    %grid-flex-base {
      @include rem(padding, 0 7.5);
      box-sizing: border-box;
      flex: 0 0 auto;
      flex-grow: 0;
      flex-shrink: 0;
    }

    // scss-lint:disable DeclarationOrder
    @include grid-flex-generate(desktop);
    // scss-lint:enable DeclarationOrder
  }

  .#{$row-class} {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    height: 100%;
  }

  // Small Desktop
  @media screen and (max-width: $d-width + px) {
    .#{$container-class} {
      width: 100%;
    }
  }

  // Tablet
  @media screen and (max-width: $t-width + px) {
    .#{$container-class} {
      @include grid-flex-generate(tablet);
    }
  }

  // Mobile
  @media screen and (max-width: $m-width + px) {
    .#{$container-class} {
      @include grid-flex-generate(mobile);
    }
  }

  @include grid-flex-row-adjust();
  @include clearfix();

}

// Flex Grid Creator
// ----------------------------
// @include grid-flex-creator('ctn-grid', 'ctn-push', 24, 1200);
@mixin grid-flex-creator($class, $push, $columns, $width) {
  @for $i from 1 through $columns {

    .#{$class}-#{$i} {
      @if ($columns == 24) {
        @extend %grid-flex-base;
        @extend %clearfix;
      }
      flex-basis: grid-percent($columns, $width, $i);
      max-width: grid-percent($columns, $width, $i);
    }

    .#{$push}-#{$i} {
      margin-#{$lang-front}: grid-percent($columns, $width, $i);
    }
  }
}

// Generate grid
// ----------------------------
@mixin grid-flex-generate($resp:null) {
  @if $resp == "desktop" {
    // create desktop grid
    @include grid-flex-creator($grid-class, $push-class, $d-columns, $d-width);
  }
  @if $resp == "tablet" {
    // adjust grid for tablet
    @include adjust-flex-grid($t-columns, $d-columns, $grid-class, $push-class, t-full-width, t-no-push-pull);
    // create tablet grid
    @include grid-flex-creator($t-grid-class, $t-push-class, $t-columns, $t-width);
  }
  @if $resp == "mobile" {
    //adjust grid for mobile
    @include adjust-flex-grid($m-columns, $d-columns, $grid-class, $push-class, t-full-width, t-no-push-pull);
    @include adjust-flex-grid($m-columns, $t-columns, $grid-class, $t-push-class, m-full-width, m-no-push-pull);
    // create mobile grid
    @include grid-flex-creator($m-grid-class, $m-push-class, $m-columns, $m-width);
  }
  @include nested-flex-grid-elements();
}

// Adjust Grid on Smaller Devices (Tablets and Mobile
@mixin adjust-flex-grid($columns, $columns-count, $class, $push, $full-width, $negate-push) {
  %#{$full-width} {
    @include rem(padding-left, $gutter-half !important);
    @include rem(padding-right, $gutter-half !important);
    flex-basis: 100%;
    max-width: 100%;
  }

  %#{$negate-push} {
    margin-#{$lang-front}: 0; // negate
  }

  @for $i from 1 through $columns-count {

    @if $i < $columns {

      .#{$class}-#{$i} {
        // @extend %grid-flex-base;
        @extend %#{$full-width};
      }

      .#{$push}-#{$i} {
        @extend %#{$negate-push};
      }
    }
    @if $i > $columns - 1 {

      .#{$class}-#{$i} {
        @extend %#{$full-width};
      }

      .#{$push}-#{$i} {
        @extend %#{$negate-push};
      }
    }
  }
}


// Flex Grid Row Adjustments
// ----------------------------
@mixin grid-flex-row-adjust() {

  .#{$prefix-class}-full {
    align-content: stretch;
  }

  // align grid elements based on top, middle, or bottom of parent
  .#{$prefix-class}-top {
    align-items: flex-start;
  }

  .#{$prefix-class}-middle {
    align-items: center;
  }

  .#{$prefix-class}-bottom {
    align-items: flex-end;
  }

  // adjust space around grid elements
  .#{$prefix-class}-space {
    justify-content: space-around;
  }

  .#{$prefix-class}-between {
    justify-content: space-between;
  }

  //@TODO: [] flex first and last for each media query
  //@TODO: [] flex reverse for each media query
  //@TODO: [] flex start, center, end for each media query

  // move grid elment first or last
  .#{$prefix-class}-first {
    order: -1;
  }

  .#{$prefix-class}-last {
    order: 1;
  }

  // reverse order of row
  .#{$prefix-class}-reverse {
    flex-direction: row-reverse;
  }

  // shift grid elements based on starting position
  .#{$prefix-class}-start {
    align-self: flex-start;
  }

  .#{$prefix-class}-end {
    align-self: flex-end;
  }

  .#{$prefix-class}-center {
    align-self: center;
    justify-content: center;
  }

  @media screen and (max-width: $t-width + px) {
    .#{$t-grid-class}-first {
      order: -1;
    }

    .#{$t-grid-class}-last {
      order: 1;
    }

    .#{$t-grid-class}-start {
      align-self: flex-start;
      order: initial;
    }

    .#{$t-grid-class}-end {
      align-self: flex-end;
      order: initial;
    }

    .#{$t-grid-class}-center {
      align-self: center;
      order: initial;
    }
  }

  @media screen and (max-width: $m-width + px) {
    .#{$m-grid-class}-first {
      order: -1;
    }

    .#{$m-grid-class}-last {
      order: 1;
    }

    .#{$m-grid-class}-start {
      align-self: flex-start;
      order: initial;
    }

    .#{$m-grid-class}-end {
      align-self: flex-end;
      order: initial;
    }

    .#{$m-grid-class}-center {
      align-self: center;
      order: initial;
    }
  }

}

@mixin nested-flex-grid-elements($class: $grid-class) {

  //@TODO: [] nested reset for start, end, first, middle, and last for padding on grid elements
  //@TODO: [] needs to work with all media query grid layouts

  .#{$row-class} {

    [class*=#{$class}]:first-of-type,
    .#{$prefix-class}-first,
    .#{$prefix-class}-start {
      padding-left: 0;
    }

    .ctn-middle {
      @include rem(padding, 0 7.5);
    }

    [class*=#{$class}]:last-of-type,
    .#{$prefix-class}-last,
    .#{$prefix-class}-end {
      padding-right: 0;
    }
  }
}
